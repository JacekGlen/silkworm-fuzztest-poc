########## MACROS ###########################################################################
#############################################################################################

function(conan_message MESSAGE_OUTPUT)
    if(NOT CONAN_CMAKE_SILENT_OUTPUT)
        message(${ARGV${0}})
    endif()
endfunction()


macro(conan_find_apple_frameworks FRAMEWORKS_FOUND FRAMEWORKS FRAMEWORKS_DIRS)
    if(APPLE)
        foreach(_FRAMEWORK ${FRAMEWORKS})
            # https://cmake.org/pipermail/cmake-developers/2017-August/030199.html
            find_library(CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND NAMES ${_FRAMEWORK} PATHS ${FRAMEWORKS_DIRS} CMAKE_FIND_ROOT_PATH_BOTH)
            if(CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND)
                list(APPEND ${FRAMEWORKS_FOUND} ${CONAN_FRAMEWORK_${_FRAMEWORK}_FOUND})
            else()
                message(FATAL_ERROR "Framework library ${_FRAMEWORK} not found in paths: ${FRAMEWORKS_DIRS}")
            endif()
        endforeach()
    endif()
endmacro()


function(conan_package_library_targets libraries package_libdir deps out_libraries out_libraries_target build_type package_name)
    unset(_CONAN_ACTUAL_TARGETS CACHE)
    unset(_CONAN_FOUND_SYSTEM_LIBS CACHE)
    foreach(_LIBRARY_NAME ${libraries})
        find_library(CONAN_FOUND_LIBRARY NAMES ${_LIBRARY_NAME} PATHS ${package_libdir}
                     NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
        if(CONAN_FOUND_LIBRARY)
            conan_message(STATUS "Library ${_LIBRARY_NAME} found ${CONAN_FOUND_LIBRARY}")
            list(APPEND _out_libraries ${CONAN_FOUND_LIBRARY})
            if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
                # Create a micro-target for each lib/a found
                string(REGEX REPLACE "[^A-Za-z0-9.+_-]" "_" _LIBRARY_NAME ${_LIBRARY_NAME})
                set(_LIB_NAME CONAN_LIB::${package_name}_${_LIBRARY_NAME}${build_type})
                if(NOT TARGET ${_LIB_NAME})
                    # Create a micro-target for each lib/a found
                    add_library(${_LIB_NAME} UNKNOWN IMPORTED)
                    set_target_properties(${_LIB_NAME} PROPERTIES IMPORTED_LOCATION ${CONAN_FOUND_LIBRARY})
                    set(_CONAN_ACTUAL_TARGETS ${_CONAN_ACTUAL_TARGETS} ${_LIB_NAME})
                else()
                    conan_message(STATUS "Skipping already existing target: ${_LIB_NAME}")
                endif()
                list(APPEND _out_libraries_target ${_LIB_NAME})
            endif()
            conan_message(STATUS "Found: ${CONAN_FOUND_LIBRARY}")
        else()
            conan_message(STATUS "Library ${_LIBRARY_NAME} not found in package, might be system one")
            list(APPEND _out_libraries_target ${_LIBRARY_NAME})
            list(APPEND _out_libraries ${_LIBRARY_NAME})
            set(_CONAN_FOUND_SYSTEM_LIBS "${_CONAN_FOUND_SYSTEM_LIBS};${_LIBRARY_NAME}")
        endif()
        unset(CONAN_FOUND_LIBRARY CACHE)
    endforeach()

    if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
        # Add all dependencies to all targets
        string(REPLACE " " ";" deps_list "${deps}")
        foreach(_CONAN_ACTUAL_TARGET ${_CONAN_ACTUAL_TARGETS})
            set_property(TARGET ${_CONAN_ACTUAL_TARGET} PROPERTY INTERFACE_LINK_LIBRARIES "${_CONAN_FOUND_SYSTEM_LIBS};${deps_list}")
        endforeach()
    endif()

    set(${out_libraries} ${_out_libraries} PARENT_SCOPE)
    set(${out_libraries_target} ${_out_libraries_target} PARENT_SCOPE)
endfunction()


########### FOUND PACKAGE ###################################################################
#############################################################################################

include(FindPackageHandleStandardArgs)

conan_message(STATUS "Conan: Using autogenerated Findgmp.cmake")
set(gmp_FOUND 1)
set(gmp_VERSION "6.2.1")

find_package_handle_standard_args(gmp REQUIRED_VARS
                                  gmp_VERSION VERSION_VAR gmp_VERSION)
mark_as_advanced(gmp_FOUND gmp_VERSION)

set(gmp_COMPONENTS gmp::GMPXX gmp::GMP)

if(gmp_FIND_COMPONENTS)
    foreach(_FIND_COMPONENT ${gmp_FIND_COMPONENTS})
        list(FIND gmp_COMPONENTS "gmp::${_FIND_COMPONENT}" _index)
        if(${_index} EQUAL -1)
            conan_message(FATAL_ERROR "Conan: Component '${_FIND_COMPONENT}' NOT found in package 'gmp'")
        else()
            conan_message(STATUS "Conan: Component '${_FIND_COMPONENT}' found in package 'gmp'")
        endif()
    endforeach()
endif()

########### VARIABLES #######################################################################
#############################################################################################


set(gmp_INCLUDE_DIRS "/home/jacek/.conan/data/gmp/6.2.1/_/_/package/b32dc77c20c75e97b08413ee06ca24455e97e6f0/include")
set(gmp_INCLUDE_DIR "/home/jacek/.conan/data/gmp/6.2.1/_/_/package/b32dc77c20c75e97b08413ee06ca24455e97e6f0/include")
set(gmp_INCLUDES "/home/jacek/.conan/data/gmp/6.2.1/_/_/package/b32dc77c20c75e97b08413ee06ca24455e97e6f0/include")
set(gmp_RES_DIRS )
set(gmp_DEFINITIONS )
set(gmp_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)
set(gmp_COMPILE_DEFINITIONS )
set(gmp_COMPILE_OPTIONS_LIST "" "")
set(gmp_COMPILE_OPTIONS_C "")
set(gmp_COMPILE_OPTIONS_CXX "")
set(gmp_LIBRARIES_TARGETS "") # Will be filled later, if CMake 3
set(gmp_LIBRARIES "") # Will be filled later
set(gmp_LIBS "") # Same as gmp_LIBRARIES
set(gmp_SYSTEM_LIBS m)
set(gmp_FRAMEWORK_DIRS )
set(gmp_FRAMEWORKS )
set(gmp_FRAMEWORKS_FOUND "") # Will be filled later
set(gmp_BUILD_MODULES_PATHS )

conan_find_apple_frameworks(gmp_FRAMEWORKS_FOUND "${gmp_FRAMEWORKS}" "${gmp_FRAMEWORK_DIRS}")

mark_as_advanced(gmp_INCLUDE_DIRS
                 gmp_INCLUDE_DIR
                 gmp_INCLUDES
                 gmp_DEFINITIONS
                 gmp_LINKER_FLAGS_LIST
                 gmp_COMPILE_DEFINITIONS
                 gmp_COMPILE_OPTIONS_LIST
                 gmp_LIBRARIES
                 gmp_LIBS
                 gmp_LIBRARIES_TARGETS)

# Find the real .lib/.a and add them to gmp_LIBS and gmp_LIBRARY_LIST
set(gmp_LIBRARY_LIST gmpxx gmp)
set(gmp_LIB_DIRS "/home/jacek/.conan/data/gmp/6.2.1/_/_/package/b32dc77c20c75e97b08413ee06ca24455e97e6f0/lib")

# Gather all the libraries that should be linked to the targets (do not touch existing variables):
set(_gmp_DEPENDENCIES "${gmp_FRAMEWORKS_FOUND} ${gmp_SYSTEM_LIBS} ")

conan_package_library_targets("${gmp_LIBRARY_LIST}"  # libraries
                              "${gmp_LIB_DIRS}"      # package_libdir
                              "${_gmp_DEPENDENCIES}"  # deps
                              gmp_LIBRARIES            # out_libraries
                              gmp_LIBRARIES_TARGETS    # out_libraries_targets
                              ""                          # build_type
                              "gmp")                                      # package_name

set(gmp_LIBS ${gmp_LIBRARIES})

foreach(_FRAMEWORK ${gmp_FRAMEWORKS_FOUND})
    list(APPEND gmp_LIBRARIES_TARGETS ${_FRAMEWORK})
    list(APPEND gmp_LIBRARIES ${_FRAMEWORK})
endforeach()

foreach(_SYSTEM_LIB ${gmp_SYSTEM_LIBS})
    list(APPEND gmp_LIBRARIES_TARGETS ${_SYSTEM_LIB})
    list(APPEND gmp_LIBRARIES ${_SYSTEM_LIB})
endforeach()

# We need to add our requirements too
set(gmp_LIBRARIES_TARGETS "${gmp_LIBRARIES_TARGETS};")
set(gmp_LIBRARIES "${gmp_LIBRARIES};")

set(CMAKE_MODULE_PATH  ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH  ${CMAKE_PREFIX_PATH})


########### COMPONENT GMP VARIABLES #############################################

set(gmp_GMP_INCLUDE_DIRS "/home/jacek/.conan/data/gmp/6.2.1/_/_/package/b32dc77c20c75e97b08413ee06ca24455e97e6f0/include")
set(gmp_GMP_INCLUDE_DIR "/home/jacek/.conan/data/gmp/6.2.1/_/_/package/b32dc77c20c75e97b08413ee06ca24455e97e6f0/include")
set(gmp_GMP_INCLUDES "/home/jacek/.conan/data/gmp/6.2.1/_/_/package/b32dc77c20c75e97b08413ee06ca24455e97e6f0/include")
set(gmp_GMP_LIB_DIRS "/home/jacek/.conan/data/gmp/6.2.1/_/_/package/b32dc77c20c75e97b08413ee06ca24455e97e6f0/lib")
set(gmp_GMP_RES_DIRS )
set(gmp_GMP_DEFINITIONS )
set(gmp_GMP_COMPILE_DEFINITIONS )
set(gmp_GMP_COMPILE_OPTIONS_C "")
set(gmp_GMP_COMPILE_OPTIONS_CXX "")
set(gmp_GMP_LIBS gmp)
set(gmp_GMP_SYSTEM_LIBS )
set(gmp_GMP_FRAMEWORK_DIRS )
set(gmp_GMP_FRAMEWORKS )
set(gmp_GMP_BUILD_MODULES_PATHS )
set(gmp_GMP_DEPENDENCIES )
set(gmp_GMP_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)

########### COMPONENT GMPXX VARIABLES #############################################

set(gmp_GMPXX_INCLUDE_DIRS "/home/jacek/.conan/data/gmp/6.2.1/_/_/package/b32dc77c20c75e97b08413ee06ca24455e97e6f0/include")
set(gmp_GMPXX_INCLUDE_DIR "/home/jacek/.conan/data/gmp/6.2.1/_/_/package/b32dc77c20c75e97b08413ee06ca24455e97e6f0/include")
set(gmp_GMPXX_INCLUDES "/home/jacek/.conan/data/gmp/6.2.1/_/_/package/b32dc77c20c75e97b08413ee06ca24455e97e6f0/include")
set(gmp_GMPXX_LIB_DIRS "/home/jacek/.conan/data/gmp/6.2.1/_/_/package/b32dc77c20c75e97b08413ee06ca24455e97e6f0/lib")
set(gmp_GMPXX_RES_DIRS )
set(gmp_GMPXX_DEFINITIONS )
set(gmp_GMPXX_COMPILE_DEFINITIONS )
set(gmp_GMPXX_COMPILE_OPTIONS_C "")
set(gmp_GMPXX_COMPILE_OPTIONS_CXX "")
set(gmp_GMPXX_LIBS gmpxx)
set(gmp_GMPXX_SYSTEM_LIBS m)
set(gmp_GMPXX_FRAMEWORK_DIRS )
set(gmp_GMPXX_FRAMEWORKS )
set(gmp_GMPXX_BUILD_MODULES_PATHS )
set(gmp_GMPXX_DEPENDENCIES gmp::GMP)
set(gmp_GMPXX_LINKER_FLAGS_LIST
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,SHARED_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,MODULE_LIBRARY>:>"
        "$<$<STREQUAL:$<TARGET_PROPERTY:TYPE>,EXECUTABLE>:>"
)


########## FIND PACKAGE DEPENDENCY ##########################################################
#############################################################################################

include(CMakeFindDependencyMacro)


########## FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #######################################
#############################################################################################

########## COMPONENT GMP FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #############

set(gmp_GMP_FRAMEWORKS_FOUND "")
conan_find_apple_frameworks(gmp_GMP_FRAMEWORKS_FOUND "${gmp_GMP_FRAMEWORKS}" "${gmp_GMP_FRAMEWORK_DIRS}")

set(gmp_GMP_LIB_TARGETS "")
set(gmp_GMP_NOT_USED "")
set(gmp_GMP_LIBS_FRAMEWORKS_DEPS ${gmp_GMP_FRAMEWORKS_FOUND} ${gmp_GMP_SYSTEM_LIBS} ${gmp_GMP_DEPENDENCIES})
conan_package_library_targets("${gmp_GMP_LIBS}"
                              "${gmp_GMP_LIB_DIRS}"
                              "${gmp_GMP_LIBS_FRAMEWORKS_DEPS}"
                              gmp_GMP_NOT_USED
                              gmp_GMP_LIB_TARGETS
                              ""
                              "gmp_GMP")

set(gmp_GMP_LINK_LIBS ${gmp_GMP_LIB_TARGETS} ${gmp_GMP_LIBS_FRAMEWORKS_DEPS})

set(CMAKE_MODULE_PATH  ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH  ${CMAKE_PREFIX_PATH})

########## COMPONENT GMPXX FIND LIBRARIES & FRAMEWORKS / DYNAMIC VARS #############

set(gmp_GMPXX_FRAMEWORKS_FOUND "")
conan_find_apple_frameworks(gmp_GMPXX_FRAMEWORKS_FOUND "${gmp_GMPXX_FRAMEWORKS}" "${gmp_GMPXX_FRAMEWORK_DIRS}")

set(gmp_GMPXX_LIB_TARGETS "")
set(gmp_GMPXX_NOT_USED "")
set(gmp_GMPXX_LIBS_FRAMEWORKS_DEPS ${gmp_GMPXX_FRAMEWORKS_FOUND} ${gmp_GMPXX_SYSTEM_LIBS} ${gmp_GMPXX_DEPENDENCIES})
conan_package_library_targets("${gmp_GMPXX_LIBS}"
                              "${gmp_GMPXX_LIB_DIRS}"
                              "${gmp_GMPXX_LIBS_FRAMEWORKS_DEPS}"
                              gmp_GMPXX_NOT_USED
                              gmp_GMPXX_LIB_TARGETS
                              ""
                              "gmp_GMPXX")

set(gmp_GMPXX_LINK_LIBS ${gmp_GMPXX_LIB_TARGETS} ${gmp_GMPXX_LIBS_FRAMEWORKS_DEPS})

set(CMAKE_MODULE_PATH  ${CMAKE_MODULE_PATH})
set(CMAKE_PREFIX_PATH  ${CMAKE_PREFIX_PATH})


########## TARGETS ##########################################################################
#############################################################################################

########## COMPONENT GMP TARGET #################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET gmp::GMP)
        add_library(gmp::GMP INTERFACE IMPORTED)
        set_target_properties(gmp::GMP PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                              "${gmp_GMP_INCLUDE_DIRS}")
        set_target_properties(gmp::GMP PROPERTIES INTERFACE_LINK_DIRECTORIES
                              "${gmp_GMP_LIB_DIRS}")
        set_target_properties(gmp::GMP PROPERTIES INTERFACE_LINK_LIBRARIES
                              "${gmp_GMP_LINK_LIBS};${gmp_GMP_LINKER_FLAGS_LIST}")
        set_target_properties(gmp::GMP PROPERTIES INTERFACE_COMPILE_DEFINITIONS
                              "${gmp_GMP_COMPILE_DEFINITIONS}")
        set_target_properties(gmp::GMP PROPERTIES INTERFACE_COMPILE_OPTIONS
                              "${gmp_GMP_COMPILE_OPTIONS_C};${gmp_GMP_COMPILE_OPTIONS_CXX}")
    endif()
endif()

########## COMPONENT GMPXX TARGET #################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    # Target approach
    if(NOT TARGET gmp::GMPXX)
        add_library(gmp::GMPXX INTERFACE IMPORTED)
        set_target_properties(gmp::GMPXX PROPERTIES INTERFACE_INCLUDE_DIRECTORIES
                              "${gmp_GMPXX_INCLUDE_DIRS}")
        set_target_properties(gmp::GMPXX PROPERTIES INTERFACE_LINK_DIRECTORIES
                              "${gmp_GMPXX_LIB_DIRS}")
        set_target_properties(gmp::GMPXX PROPERTIES INTERFACE_LINK_LIBRARIES
                              "${gmp_GMPXX_LINK_LIBS};${gmp_GMPXX_LINKER_FLAGS_LIST}")
        set_target_properties(gmp::GMPXX PROPERTIES INTERFACE_COMPILE_DEFINITIONS
                              "${gmp_GMPXX_COMPILE_DEFINITIONS}")
        set_target_properties(gmp::GMPXX PROPERTIES INTERFACE_COMPILE_OPTIONS
                              "${gmp_GMPXX_COMPILE_OPTIONS_C};${gmp_GMPXX_COMPILE_OPTIONS_CXX}")
    endif()
endif()

########## GLOBAL TARGET ####################################################################

if(NOT ${CMAKE_VERSION} VERSION_LESS "3.0")
    if(NOT TARGET gmp::gmp)
        add_library(gmp::gmp INTERFACE IMPORTED)
    endif()
    set_property(TARGET gmp::gmp APPEND PROPERTY
                 INTERFACE_LINK_LIBRARIES "${gmp_COMPONENTS}")
endif()

########## BUILD MODULES ####################################################################
#############################################################################################
########## COMPONENT GMP BUILD MODULES ##########################################

foreach(_BUILD_MODULE_PATH ${gmp_GMP_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()
########## COMPONENT GMPXX BUILD MODULES ##########################################

foreach(_BUILD_MODULE_PATH ${gmp_GMPXX_BUILD_MODULES_PATHS})
    include(${_BUILD_MODULE_PATH})
endforeach()
